#	vim: set tabstop=4 columns=120 shiftwidth=4:
#-----------------------------------------------------------------------------------------------------------------------
#	MBRadio
#
#	TODO List.   Please set your tab width to 4 characters!
#-----------------------------------------------------------------------------------------------------------------------

#	TASK/STATUS		COMMENTS
------------------------------------------------------------------------------------------------------------------------

2.	TO DO			The current Toolbar "implementation" of Cocoa App does not work in Tiger.
	(Jonathan)
	PRIORITY		Low
	STATUS			Incomplete
	
3.	TO DO			HTTP requests should be done on background thread.
	(Jonathan)
	PRIORITY		Medium
	STATUS			Incomplete
	
4.	INVESTIGATE		We need a way to store configuration variables that can be read/written by both the objc app
	(Jonathan)		and python.
					
					*IDEA* Use one of those .plist files?  Both ObjC and Python can read those.
					
					Example configutation data:
						serverPort
						maxRequests_UserPerHour
						maxRequests_ArtistPerHour
						maxRequests_AlbumPerHour
					
					*IDEA* Perhaps the GUI could have a "Config" pane/tab where one could enter this information?
						The ObjC app would then write these options to .plist config file.
					
					The python app could either periodically poll the config file to see if it has changed, or the ObjC
					app could send some kind of command to the proxy server like an HTTP GET request to
						http://localhost:15800/reload-config/
					whenever the config options are changed.
	
	FOLLOWUP		I implemented the 'http://localhost:15800/reload-config' interface in python.
	(Erich)
	
	TO DO			Once we decide how the configurations are stored, the corresponding code must be written in
	(Erich)			the python script to read the config information.

	FOLLOWUP		I don't really see the need for a common config file. Can't the prefs be set via the http-interface.
	(Jon)			Apart from the serverPort I guess, which could be given as a parameter when the server is started 
					(by the objc app) I am plainning to use the normal cocoa defaults system for storing the prefs. The 
					prefs will be stored in .plist format (binary or textual) A good Mac way is to minimize the prefs.
					
	FOLLOWUP		I implemented a 'http://localhost:15800/set-config' interface
	(Erich)			This will allow the ObjC app to change config settings on the python server on the fly.
				
					Will this work as you want?
	
	RESULT			?


7.	TODO			Modify the PHP code for the radio-station website to support the python proxy server as a DB
	(Erich)			backend. The PHP code (abstracted & stripped of references to 'MB radio :P') will also eventually
					be included in this project.
	
	STATUS			None

=== Done

1.	TO DO			Objc app needs to query the python proxy to get the list of new requests.
	(Jonathan)		This can be done by sending an HTTP GET request to http://localhost:15800/new-requests/
	
	STATUS			DONE

5.	INVESTIGATE		Can iTunes be queried with Applescript to find out what the next X items in the playlist are?
			
					One function of the website is to return a list of "coming up next" songs. It shows the next 3 or 4
					songs that will be played from the playlist queue.

					Getting this information to the python server could be as simple as a call to an interface like
					http://localhost:15800/coming-up?song1=ID&song2=ID&song3=ID ...

	FOLLOWUP		Yes. It just needs to be implemented. :) 
	(Jon)
	
	TODO			Implement it :P 
	
	RESULT			DONE

	 
6.	TODO			Implement the statistics interface on the python app. The website requests information from the
	(Erich)			python server such as "Top 10 Artists Played in the Last 5 Days"  or  "Top 10 Requested Artists"
					and so on. Not strictly necessary, but if I want to fully emulate the existing windows application,
					I should get this done :)
					
	STATUS			Complete
	

2.	INVESTIGATE		I am concerned what happens in iTunes if new tracks are added to the library while the person
	(Erich)			is DJing. I do not believe the "Track ID" numbers remain consistent if the library is updated
					with new songs.
					
					However, I notice that there is a <key>Persistent ID</key> in the iTunes XML DB.
					
					Should we be using this ID instead of what is found in the Track ID field???
					
					Is it possible to add the correct track in iTunes (with your little applescript) using this
					Persistent ID instead of the regular Track ID??
	
	FOLLOWUP		As long as you can play the track from Applescript with the Persistent ID, let's do that.
	(Erich)
	
	RESULT			DONE - We will use the PersistentID throughout.
	
		
4b.	INVESTIGATE		Also, is there a way to pull from iTunes a list of tracks that have recently been played?
					Say I want to know "What where the last 10 tracks played in iTunes" so that I can display
					this information on the website.
					
	FOLLOWUP		Last 10 tracks played may be doable with so called smart playlists. But it smells fishy. 
	(Jonathan)		I have no idea if those can be created programmatically or not.

	FOLLOWUP		Let's ignore this for now, then. Instead, let's use the simple polling method that fires every X
	(Erich)			seconds and pulls the "currently playing" song from iTunes. The ObjC app will report this
					to the python server via the 'http://localhost:15800/now-playing?songid=X'  interface.  The python
					app will maintain the list of "recently played songs" for querying. The played songs will be stored
					in memory for the current session, and also logged to a file on the disk for statistics purposes
					at a later time.

	RESULT			DONE
	

4a.	INVESTIGATE		Can we investigate if there is a way to pull information from iTunes about the song that is
					currently playing?

	FOLLOWUP		Yes, currently playing song can be queried from iTunes with Applescript.
	(Jonathan)
	
	FOLLOWUP		Good. Let's implement this with a timer. Every X seconds, poll iTunes for the currently playing
	(Erich)			song. If the song is different than the result of the previous poll, then the ObjC app will send
					the SongID to the python server for recording and tracking via the 
					'http://localhost:15800/now-playing?songid=X'  interface.

	RESULT			DONE
	
5	TO DO			Implement the 'http://localhost:15800/now-playing?songid=X'  interface from the ObjC program.
	(Jonathan)

	STATUS			DONE
	
3.	TO DO			Cocoa App should start the webserver
	(Jonathan)
	STATUS			DONE
